package br.com.bandtec.progressbar;

import java.util.concurrent.ThreadLocalRandom;

/**
 *
 * @author jvruas
 */
public class Screen1 extends javax.swing.JFrame {
    
    private int totalNumberReadings = 1;
    
    private int CPUSummationReadings;
    private int CPUMinimumValue;
    private int CPUAverageValue;
    private int CPUMaximumValue;
    
    private int RAMSummationReadings;
    private int RAMMinimumValue;
    private int RAMAverageValue;
    private int RAMMaximumValue;
    
    private int HDSummationReadings;
    private int HDMinimumValue;
    private int HDAverageValue;
    private int HDMaximumValue;

    /**
     * Creates new form Tela1
     */
    public Screen1() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        progressBarTest1 = new javax.swing.JProgressBar();
        progressBarTest3 = new javax.swing.JProgressBar();
        labelSubtitle4 = new javax.swing.JLabel();
        progressBarCPU = new javax.swing.JProgressBar();
        buttonGenerateData = new javax.swing.JButton();
        labelSubtitle1 = new javax.swing.JLabel();
        labelMainTitle = new javax.swing.JLabel();
        labelSubtitle2 = new javax.swing.JLabel();
        labelSubtitle3 = new javax.swing.JLabel();
        progressBarHD = new javax.swing.JProgressBar();
        progressBarRAM = new javax.swing.JProgressBar();
        labelCPUMinimumValue = new javax.swing.JLabel();
        labelCPUMaximumValue = new javax.swing.JLabel();
        labelCPUAverageValue = new javax.swing.JLabel();
        labelRAMAverageValue = new javax.swing.JLabel();
        labelRAMMinimumValue = new javax.swing.JLabel();
        labelRAMMaximumValue = new javax.swing.JLabel();
        labelHDAverageValue = new javax.swing.JLabel();
        labelHDMinimumValue = new javax.swing.JLabel();
        labelHDMaximumValue = new javax.swing.JLabel();

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Uso de Memoria CPU(%)");

        progressBarTest1.setStringPainted(true);

        progressBarTest3.setStringPainted(true);

        labelSubtitle4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        labelSubtitle4.setText("Uso de Memoria CPU(%)");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        progressBarCPU.setStringPainted(true);

        buttonGenerateData.setText("Fazer leitura dos dados");
        buttonGenerateData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateDataActionPerformed(evt);
            }
        });

        labelSubtitle1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        labelSubtitle1.setText("Uso de Memoria CPU(%)");

        labelMainTitle.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        labelMainTitle.setText("Projeto individual - Artefato 1ยบ Sprint");

        labelSubtitle2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        labelSubtitle2.setText("Uso de Memoria RAM(%)");

        labelSubtitle3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        labelSubtitle3.setText("Uso de Memoria Disco(%)");

        progressBarHD.setStringPainted(true);

        progressBarRAM.setStringPainted(true);

        labelCPUMinimumValue.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        labelCPUMinimumValue.setText("Minimo:");

        labelCPUMaximumValue.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        labelCPUMaximumValue.setText("Maximo: ");

        labelCPUAverageValue.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        labelCPUAverageValue.setText("Media: ");

        labelRAMAverageValue.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        labelRAMAverageValue.setText("Media: ");

        labelRAMMinimumValue.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        labelRAMMinimumValue.setText("Minimo:");

        labelRAMMaximumValue.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        labelRAMMaximumValue.setText("Maximo: ");

        labelHDAverageValue.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        labelHDAverageValue.setText("Media: ");

        labelHDMinimumValue.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        labelHDMinimumValue.setText("Minimo:");

        labelHDMaximumValue.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        labelHDMaximumValue.setText("Maximo: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(labelMainTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(39, 39, 39))
            .addGroup(layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(labelCPUMinimumValue)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(labelCPUAverageValue)
                                    .addGap(115, 115, 115)
                                    .addComponent(labelCPUMaximumValue))
                                .addComponent(progressBarCPU, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(labelSubtitle2)
                            .addComponent(labelSubtitle1)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(labelRAMMinimumValue)
                                    .addGap(120, 120, 120)
                                    .addComponent(labelRAMAverageValue)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(labelRAMMaximumValue))
                                .addComponent(progressBarRAM, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelSubtitle3)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(labelHDMinimumValue)
                                    .addGap(120, 120, 120)
                                    .addComponent(labelHDAverageValue)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(labelHDMaximumValue))
                                .addComponent(progressBarHD, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(171, 171, 171)
                .addComponent(buttonGenerateData)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelMainTitle)
                .addGap(20, 20, 20)
                .addComponent(labelSubtitle1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBarCPU, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelCPUMinimumValue)
                    .addComponent(labelCPUAverageValue)
                    .addComponent(labelCPUMaximumValue))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelSubtitle2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBarRAM, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelRAMMinimumValue)
                    .addComponent(labelRAMAverageValue)
                    .addComponent(labelRAMMaximumValue))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelSubtitle3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBarHD, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelHDMinimumValue)
                    .addComponent(labelHDAverageValue)
                    .addComponent(labelHDMaximumValue))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonGenerateData)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonGenerateDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenerateDataActionPerformed
        int currentUsageValueCPU = ThreadLocalRandom.current().nextInt(0, 101);
        int currentUsageValueRAM = ThreadLocalRandom.current().nextInt(0, 101);
        int currentUsageValueHD = ThreadLocalRandom.current().nextInt(0, 101);
        
        if(currentUsageValueCPU < 0) {
            currentUsageValueCPU = 0;
        } else if(currentUsageValueCPU > 100) {
            currentUsageValueCPU = 100;
        }
        
        if(currentUsageValueRAM < 0) {
            currentUsageValueRAM = 0;
        } else if(currentUsageValueRAM > 100) {
            currentUsageValueRAM = 100;
        }
        
        if(currentUsageValueHD < 0) {
            currentUsageValueHD = 0;
        } else if(currentUsageValueHD > 100) {
            currentUsageValueHD = 100;
        }
        
        if(totalNumberReadings == 1) {
            this.CPUSummationReadings = currentUsageValueCPU;
            this.CPUMinimumValue = currentUsageValueCPU;
            this.CPUAverageValue = currentUsageValueCPU;
            this.CPUMaximumValue = currentUsageValueCPU;
            
            this.RAMSummationReadings = currentUsageValueRAM;
            this.RAMMinimumValue = currentUsageValueRAM;
            this.RAMAverageValue = currentUsageValueRAM;
            this.RAMMaximumValue = currentUsageValueRAM;
            
            this.HDSummationReadings = currentUsageValueHD;
            this.HDMinimumValue = currentUsageValueHD;
            this.HDAverageValue = currentUsageValueHD;
            this.HDMaximumValue = currentUsageValueHD;        
        } else {    
            if(currentUsageValueCPU > this.CPUMaximumValue) {
                this.CPUMaximumValue = currentUsageValueCPU;
            } else if(currentUsageValueCPU < this.CPUMinimumValue) {
                this.CPUMinimumValue = currentUsageValueCPU;
            }

            if(currentUsageValueRAM > this.RAMMaximumValue) {
                this.RAMMaximumValue = currentUsageValueRAM;
            } else if(currentUsageValueRAM < this.RAMMinimumValue) {
                this.RAMMinimumValue = currentUsageValueRAM;
            }

            if(currentUsageValueHD > this.HDMaximumValue) {
                this.HDMaximumValue = currentUsageValueHD;
            } else if(currentUsageValueHD < this.HDMinimumValue) {
                this.HDMinimumValue = currentUsageValueHD;
            }
        
            this.CPUSummationReadings += currentUsageValueCPU;
            this.RAMSummationReadings += currentUsageValueRAM;
            this.HDSummationReadings += currentUsageValueHD;
           
            this.CPUAverageValue = 
                    Math.round(this.CPUSummationReadings / totalNumberReadings);
            this.RAMAverageValue = 
                    Math.round(this.RAMSummationReadings / totalNumberReadings);
            this.HDAverageValue = 
                    Math.round(this.HDSummationReadings / totalNumberReadings);
        }
        
        this.totalNumberReadings++;
           
        progressBarCPU.setValue(currentUsageValueCPU);
        labelCPUMinimumValue.setText(String.format("Minimo: %d", 
                this.CPUMinimumValue));
        labelCPUAverageValue.setText(String.format("Media: %d",
                this.CPUAverageValue));
        labelCPUMaximumValue.setText(String.format("Maximo: %d", 
                this.CPUMaximumValue));
        
        progressBarRAM.setValue(currentUsageValueRAM);
        labelRAMMinimumValue.setText(String.format("Minimo: %d",
                this.RAMMinimumValue));
        labelRAMAverageValue.setText(String.format("Media: %d",
                this.RAMAverageValue));
        labelRAMMaximumValue.setText(String.format("Maximo: %d",
                this.RAMMaximumValue));
        
        progressBarHD.setValue(currentUsageValueHD);
        labelHDMinimumValue.setText(String.format("Minimo: %d",
                this.HDMinimumValue));
        labelHDAverageValue.setText(String.format("Media: %d",
                this.HDAverageValue));
        labelHDMaximumValue.setText(String.format("Maximo: %d",
                this.HDMaximumValue));
    }//GEN-LAST:event_buttonGenerateDataActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Screen1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Screen1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Screen1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Screen1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Screen1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonGenerateData;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel labelCPUAverageValue;
    private javax.swing.JLabel labelCPUMaximumValue;
    private javax.swing.JLabel labelCPUMinimumValue;
    private javax.swing.JLabel labelHDAverageValue;
    private javax.swing.JLabel labelHDMaximumValue;
    private javax.swing.JLabel labelHDMinimumValue;
    private javax.swing.JLabel labelMainTitle;
    private javax.swing.JLabel labelRAMAverageValue;
    private javax.swing.JLabel labelRAMMaximumValue;
    private javax.swing.JLabel labelRAMMinimumValue;
    private javax.swing.JLabel labelSubtitle1;
    private javax.swing.JLabel labelSubtitle2;
    private javax.swing.JLabel labelSubtitle3;
    private javax.swing.JLabel labelSubtitle4;
    private javax.swing.JProgressBar progressBarCPU;
    private javax.swing.JProgressBar progressBarHD;
    private javax.swing.JProgressBar progressBarRAM;
    private javax.swing.JProgressBar progressBarTest1;
    private javax.swing.JProgressBar progressBarTest3;
    // End of variables declaration//GEN-END:variables
}
